-----------------------------------------/ cpp \---------------------------------------------------

    
----------------------------------------/_  Ex  _\------------------------------------------------
    Nesta parte alem da explicacao de CADA um dos metodos separados por Paragrafos (P_...) revela a ideia por tras dos metodos
alguns eu achei irrelevante mostrar, afinal, muitos fazem a mesma coisa porem, com pequenas alteacoes, se for muito siguinificante mostrarei 

P_00
    Funcionalidades:
    * 1. Limpa possíveis flags de erro do cin
    * 2. Exibe mensagem personalizada
    * 3. Descarta entrada residual do buffer
    * 4. Aguarda nova entrada (linha completa)
    * 5. Adiciona espaçamento pós-pausa
    * 
    * Segurança:
    * - Protegido contra buffer overflows
    * - Reseta estado do cin
    * - Compatível com operações pipelined


P_01
        ATRIBUTOS PRIVADOS:
    1. `optional` (T)
    - Propósito: Armazenar um valor opcional/auxiliar
    - Tipo: Genérico (template T)
    - Uso típico: Valor padrão, flag ou armazenamento temporário

    2. `length` (int)
    - Propósito: Armazenar o tamanho atual do array
    - Características:
        * Deve ser sempre ≥ 0
        * Controla os limites do array

    3. `data` (T*)
    - Propósito: Ponteiro para os elementos armazenados
    - Características:
        * Alocado dinamicamente
        * Tamanho determinado por `length`
        * Armazena elementos do tipo T

    INVARIANTES DA CLASSE:
    1. Se length == 0 → data deve ser nullptr
    2. Se length > 0 → data deve apontar para área válida
    3. optional pode ser usado independentemente

//--

P_02

    Aloca memória para a estrutura que controla o array (int_Array).

    Se n > 0, aloca memória para armazenar n inteiros.

    Inicializa os campos:

        length = tamanho do array (n).

        data   = ponteiro para os inteiros (alocado dinamicamente).

        ix = índice atual (começa em 0).
    Retorna o ponteiro para o array criado (ou NULL se falhar).
    
        Se algo der errado:
 
        Se não houver memória, imprime "ERRO: Falta espaco" e retorna NULL.

        Se n ≤ 0, cria a estrutura, mas não aloca dados (data = NULL, length = 0).

    Para que serve?

    *Criar um array redimensionável de forma organizada, guardando tamanho, dados e índice atual em uma única estrutura.*

//--

P_03
    * Funcionalidades:
    * 1. Verifica se há memória alocada (data != nullptr)
    * 2. Libera a memória usando delete
    * 3. Reseta o ponteiro para nullptr (boa prática)
    * 4. Não modifica o length/optional

//--

P_04
    O que faz?
        Atribui um valor a uma posição específica do array, desde que a posição seja válida.

    Funcionamento Detalhado:
    1. Verifica se a posição está dentro dos limites:
    - Posição >= 0
    - Posição < tamanho atual (length)
    2. Se válida:
    - Atribui o 'value' à posição especificada
    3. Se inválida:
    - Silenciosamente ignora a operação

    Parâmetros:
    - position: Índice da posição a modificar (base 0)
    - value: Valor a ser armazenado (tipo T)

    Características:
    - Não retorna valor (void)
    - Modifica o estado interno do array
    - Operação atômica básica
    - Não-realocante (mantém tamanho fixo)

//-- 
    
Ex_method_01_

 Gera uma arranjo de tamanho 5 e usando 4 funcoes printa de 1 a 5, em sua respectivamentas posicoes

//--

P_05
    O que faz?
        Retorna o valor de uma posição específica do array ou o valor opcional padrão caso a posição seja inválida.

    Funcionamento Detalhado:
    1. Inicializa 'value' com o valor 'optional' (fallback padrão)
    2. Verifica se a posição solicitada está dentro dos limites válidos:
    - Posição >= 0
    - Posição < tamanho do array (length)
    3. Se válida:
    - Copia o valor da posição para 'value'
    4. Retorna sempre uma cópia do valor (nunca referência)

    Características Principais:
    - Seguro: Verificação de limites automática
    - Não-lançante: Nunca gera exceções
    - Const-correct: Pode ser usado em objetos const
    - Retorno por valor: Evita problemas de referência

    Parâmetros:
    - position: Índice da posição desejada (base 0)

    Valor de Retorno:
    - Valor do array na posição OU
    - Valor 'optional' se posição inválida

//--


//--

P_06
    O que faz?
        Exibe o conteúdo completo do array formatado em colunas (índice vs valor)

    Passo a Passo:
        1. Imprime linha inicial vazia (\n)
        2. Para cada elemento do array:
            a) Formata e mostra o índice (3 dígitos)
            b) Mostra separador (" : ")
            c) Exibe valor formatado (9 espaços)
            d) Quebra linha
        3. Imprime linha final vazia (\n)

    Detalhes Técnicos:
        - Formatação:
            * setw(3):  Alinhamento dos índices
            * setw(9):  Espaço fixo para valores
        - Não modifica o array
        - Requer: #include <iomanip> para setw

//--

Ex_method_03_

//--

P_07

    O que faz?
        Lê valores da entrada padrão (teclado) para preencher todos os elementos do array.

    Passo a Passo Simplificado:
        1. Inicia uma nova linha no console
        
        2. Loop de leitura:
            - Para cada posição x de 0 até length-1:
                * Exibe o índice formatado (3 dígitos)
                * Lê o valor digitado e armazena em data[x]
        
        3. Finaliza com nova linha

    Detalhes Importantes:
        - Não faz validação do tipo de entrada
        - Não limpa o buffer entre leituras (pode causar problemas)
        - Assume que o array já está alocado

//--

P_08

    O que faz?
        Salva o conteúdo do array em um arquivo texto com formato específico.

    Passo a Passo Simplificado
        1. Abre arquivo para escrita
            - Cria/sobrescreve o arquivo especificado
        
        2. Grava metadados
            - Primeira linha: tamanho do array (length)
        
        3. Grava dados
            - Elementos subsequentes: um valor por linha
        
        4. Fecha arquivo automaticamente (RAII)

    Formato do Arquivo
        [length]
        [data[0]]
        [data[1]]
        ...
        [data[length-1]]

    Quando Usar?
        * Para persistência simples de arrays
        * Em serialização básica de dados
        * Para compartilhar dados entre programas

//-- 

P_09
    O que faz?

    Cria uma cópia independente de um array de inteiros (int_Array), alocando nova memória para os dados.
    Passo a Passo Simplificado

        Verifica se o array original é válido

            Se array.length ≤ 0, retorna NULL e exibe erro.

        Aloca memória para a cópia

            Usa new_int_Array() para criar uma nova estrutura.

            Aloca espaço para os dados com IO_new_ints().

        Copia os valores

            Passa por cada elemento do array original e copia para o novo.

        Retorna a cópia

            Se tudo der certo, retorna o novo array (ref_int_Array).

            Se falhar em qualquer etapa, retorna NULL.


    Quando Usar?

    * Quando precisa modificar um array sem alterar o original
    * Para evitar efeitos colaterais em funções que manipulam arrays
    * Em operações que exigem versões independentes dos dados

//--

P_10 
    CONSTRUTOR PADRÃO

    O que faz?

        Cria um array vazio (sem elementos).

        Inicializa:

            length = 0

            data = nullptr (sem alocação de memória).

    Quando usar?
    ✔ Quando você precisa de um array temporário que será preenchido depois.
    ✔ Para inicializar arrays em classes antes de definir seu tamanho.
    ✔ Em STL (Standard Template Library) para compatibilidade com containers.


    CONSTRUTOR DE CÓPIA DE ARRAY ESTILO-C

    O que faz?

        Copia um array tradicional (C-style) para um objeto Array.

        Verifica se o tamanho é válido (length > 0).

        Aloca memória e copia cada elemento do array original.

    Quando usar?
    ✔ Quando você tem um array em C (ex.: int v[] = {1, 2, 3};) e quer convertê-lo em um objeto Array.
    ✔ Para evitar compartilhamento de memória (cria uma cópia independente).
    ✔ Em sistemas legados que usam arrays brutos e precisam de uma versão mais segura.

//--

P_11
    O QUE FAZ?

    Cria uma cópia independente de outro objeto Array, incluindo:

        Verifica se o array de origem (other) é válido (length > 0).

        Copia o tamanho (length) e aloca nova memória.

        Copia cada elemento do array original para o novo.

    COMO FUNCIONA?

        Verificação de segurança:

            Checa se other.length é válido (imprime erro se ≤ 0).

        Cópia profunda (deep copy):

            Aloca um novo espaço de memória (new T[other.length]).

            Copia manualmente cada elemento via loop for.

//--

P_12
    Funcionamento:

    Verifica se o array é válido (dados não nulos)

    Percorre todo o array comparando cada elemento com o valor alvo

    Quando encontra, imprime a posição do valor

    Retorna sempre o último índice verificado (igual ao tamanho do array)

//--

P_13
    - Objetivo: Preencher array com valores do usuário
    - Funcionamento:
    1. Verifica se data != NULL
    2. Se válido:
        * Percorre array
        * Solicita valores via IO_readint
        * Reseta index para 0
    3. Se inválido: mostra mensagem de erro
    - Características:
    * Modifica estrutura diretamente
    * Interface interativa
    * Controle básico de alocação
    - Fluxo:
    Entrada: estrutura ref_array
    Saída: array preenchido ou mensagem de erro

//--

P_14
  - Objetivo: Ler um array de um arquivo texto
    - Parâmetro:
    * fileName: nome do arquivo a ser lido (chars)
    - Retorno: Estrutura ref_array preenchida ou NULL

    Funcionamento:
    1. Abre arquivo no modo texto ("rt")
    2. Se arquivo aberto com sucesso:
    a) Lê o primeiro valor como tamanho do array (size)
    b) Cria nova estrutura de array com new_array(size)
    c) Preenche o array com os valores restantes do arquivo
    d) Fecha o arquivo
    3. Se falha ao abrir arquivo: retorna NULL

//--

P_15
    - Objetivo: Comparar dois arrays contidos em estruturas ref_array
    - Parâmetros:
    * array_1: primeira estrutura de array
    * array_2: segunda estrutura de array
    - Retorno: 
    * true: se arrays forem idênticos
    * false: se diferentes ou inválidos

    Funcionamento:
    1. Verificação inicial:
    - Checa se ambos arrays são válidos (data não nulo)
    - Compara tamanhos dos arrays
        * Se diferentes: imprime erro e retorna false

    2. Comparação elemento a elemento:
    - Para cada posição dos arrays:
        * Imprime valores sendo comparados
        * Se encontrar diferença:
        - Indica posição da diferença
        - Retorna false imediatamente

    3. Resultados possíveis:
    - true: se todos elementos forem iguais
    - false: se arrays tiverem tamanhos diferentes, elementos diferentes ou forem inválidos

//--

P_16
    - Objetivo: Criar novo array com combinação de dois arrays existentes
    - Parâmetros:
    * array_1: primeiro array de entrada
    * array_2: segundo array de entrada
    * x: fator multiplicativo adicional
    - Retorno: 
    * Novo array (ref_array) com resultados
    * NULL em caso de erro

    Funcionamento:
    1. Verificação inicial:
    - Cria array auxiliar do mesmo tamanho que array_1
    - Verifica se pelo menos um array tem dados (condição OR)
    - Compara tamanhos dos arrays:
        * Se diferentes: 
        - Imprime mensagem de erro
        - Libera memória do array auxiliar
        - Retorna NULL

    2. Operação principal:
    - Para cada elemento:
        * Multiplica elementos correspondentes de array_1 e array_2
        * Multiplica pelo fator x
        * Armazena resultado no array auxiliar

    3. Retorno:
    - Retorna o novo array preenchido se operação for bem sucedida
    - Retorna NULL em caso de erro

//--


P_17
    LER DADOS DE UM ARQUIVO
    O que faz?
    Lê o tamanho e os elementos de um arranjo a partir de um arquivo.
    Verifica se o arquivo foi aberto corretamente, se o tamanho é válido e se todos os elementos foram lidos corretamente.
    Caso ocorra erro, desaloca o arranjo e zera o tamanho.

//--

P_18
    SOMA DE INTERVALO NO ARRANJO
    O que faz?
    Recebe duas posições e retorna a soma dos valores dentro desse intervalo do arranjo.
    Valida se o ponteiro está aterrado e se as posições são válidas.

//--

P_19
    MÉDIA DE UM INTERVALO DO ARRANJO
    O que faz?
    Calcula a média dos elementos entre duas posições do arranjo.
    Soma os valores e divide pela quantidade de elementos no intervalo.

//--

P_20
    VERIFICAÇÃO DE ELEMENTOS VÁLIDOS
    O que faz?
    Verifica se todos os elementos do arranjo são positivos e menores ou iguais a 100.
    Retorna true se todos forem válidos, senão false.

//--

P_21
    VERIFICA SE ARRANJO ESTÁ EM ORDEM DECRESCENTE
    O que faz?
    Percorre o arranjo verificando se cada elemento é maior ou igual ao próximo.
    Retorna true se estiver em ordem decrescente.

//--

P_22
    PROCURA UM VALOR EM UM INTERVALO
    O que faz?
    Verifica se um valor existe dentro de um intervalo do arranjo.
    Retorna true se o valor for encontrado, senão false.

//--

P_23
    MULTIPLICAÇÃO ESCALAR POR INTERVALO
    O que faz?
    Retorna um novo arranjo onde os elementos dentro de um intervalo são multiplicados por uma constante.
    Os elementos fora do intervalo permanecem inalterados.

//--

P_24
    ORDENAÇÃO DECRESCENTE (BUBBLE SORT)
    O que faz?
    Ordena o arranjo em ordem decrescente utilizando o algoritmo de bubble sort.

//--

    P_24 (duplicado, mas diferente)
    VERIFICA SE DOIS ARRANJOS SÃO DIFERENTES
    O que faz?
    Compara dois arranjos e retorna true se forem de tamanhos diferentes ou se algum elemento for diferente.

//--

    P_25
    SOBRECARGA DO OPERADOR !=
    O que faz?
    Permite usar != para comparar dois objetos do tipo Array<int>.
    Retorna true se forem diferentes em tamanho ou valor.

//--

    P_26
    DIFERENÇA ENTRE ELEMENTOS DE DOIS ARRANJOS
    O que faz?
    Cria um novo arranjo contendo a subtração dos elementos de dois arranjos posição a posição.
    Só é feito se os dois arranjos tiverem o mesmo tamanho.

----------------------------------------/_  NOTAS  _\------------------------------------------------

| `method_00()` | Não faz nada. Usado como exemplo/base inicial. 
                                                                                                       
| `method_01()` | Gera `N` valores inteiros aleatórios dentro de um intervalo definido pelo usuário e mostra esses valores na tela.    
                                 
| `method_02()` | Lê valores de um arquivo e encontra o **menor valor ímpar** no arranjo.   
                                                                            
| `method_03()` | Lê valores de um arquivo e encontra o **maior valor par múltiplo de 3**.
                                                                              
| `method_04()` | Lê valores de um arquivo e calcula a **soma dos elementos dentro de um intervalo \[x, y]** definido pelo usuário. 
                                    
| `method_05()` | Lê valores de um arquivo e calcula a **média dos elementos dentro de um intervalo \[x, y]** definido pelo usuário.  
                                  
| `method_06()` | Verifica se **todos os valores** no arranjo são **positivos e maiores que 100**. 
                                                                     
| `method_07()` | Verifica se o arranjo está **ordenado em ordem decrescente**.   
                                                                                      
| `method_08()` | Lê valores de um arquivo, **compara dois arranjos** e mostra os **valores comuns** entre eles.
                                                        
| `method_09()` | Lê valores de um arquivo, **compara dois arranjos** e mostra os **valores diferentes** entre eles.  
                                                  
| `method_10()` | Lê valores de um arquivo e mostra os valores **maiores que a média** em um novo arquivo.
                                                              
| `method_11()` | Lê valores de um arquivo e mostra os valores **menores ou iguais à média** em um novo arquivo.  
                                                      
| `method_12()` | Lê valores de um arquivo e **verifica se um valor X ocorre** dentro do arranjo, a partir de uma posição inicial. Mostra as posições onde ele aparece. |

